この文書は，おまけ，ていうか，暇なときに気が向いたまま書き貯めたものです．

■■ WonX 開発秘話

そもそもなんで WonderWitch をはじめたかというと，会社の先輩に紹介されたのだ．
その先輩もどうやらモノづくりの好きな人らしく，モノづくり大好き人間どうし
ということで，そのへんは，

	同じ血を感じる (坂井がかってに感じてるだけ)

とでも言うのだろうか，なにかおもしろいネタがあったら振ってほしいと
酒の席で冗談混じりに頼んでいたのだが，そのあとで WonderWitch を紹介された．

実際に購入したのは８月になってからだったのだが，いじってみると
昔のモノ作りの楽しさ，というか，コンピュータをいじる楽しさがぎゅうぎゅうに
詰まったようなもので，すぐにのめりこんだ．

ここで知らない人のために，WonderWitch というものについて，簡単に説明しよう．

バンダイから WonderSwan という携帯用ゲーム機が出ているが，この WonderSwan 上で
動作するプログラムを作るためのキットが WonderWitch である．株式会社 Qute が
開発した．
プログラム作成の手順は簡単で，Windows 環境でC言語で作成・コンパイルし，
WonderSwan には専用のカートリッジを装着して，専用の転送ケーブルと
転送ソフトを使って WonderSwan 側に転送すると，カートリッジに保存されて，
ゲームができる，といったぐあいである．
プログラム自体はゲームに限らず，アイディア次第でいろいろ書ける．
シリアルポートがあるので，応用範囲はとても広い．

ただ，C言語とはいっても当然C言語ができれば即プログラムが書けるという
ものではない．画面まわりやキー入力用の独自のサービス関数がいっぱい用意
されていて，それを使って書くことになるのだが，WonderSwan のハードウエアは
さすがゲーム機，というか，スプライト機能やパレット機能を持っているので，
昔のMSXの時代は普通だったのだが，今となっては特殊なハードウエアである．
つまり，スプライトとかパレットとかをちゃんと理解できてないと，
プログラムは書けないし，メモリの制限もあるし，プログラムサイズの制限もあるし，
言語がCになったというだけで，実はその中身は，

	昔の MSX とかでの BASIC プログラミングによく似てる

というのが正しい表現だと思う．

というわけではじめてみた WonderWitch なんだけど，ぼくの場合はもともと
BASIC や MS-C のような制限された環境で書いていたこともあるので，
あまり違和感無くのめり込めた．
ただぼくの場合は，

	プログラムの９割は通勤電車の中で書く

という「電車プログラマ」状態なので，コーディングの最中はいいのだが，
デバッグの段階になると，

	シリアルカードとシリアルケーブルと WonderSwan を常備して，
	電車の中でコンパイルして転送してテストする．

ということになってしまう．(実話)
まあ，ぼくが毎日乗っている電車は，朝は１車両に一人しか乗ってない
ということもザラで，

	電車の中で靴を脱いで足を伸ばしてプログラムを書く

ということも可能なくらい(さすがにここまではやってないけど)なので，
これでもべつにいいんだけれど，持ちものはなるべく軽くしたいと思っているので，
なんとかしたいと思っていた．

というわけで，WonderWitch の各種関数の互換関数を FreeBSD 用に作成して，
FreeBSD 上でコンパイル・リンク・実行が行えて，最低限のデバッグを
FreeBSD 上でできたらいいな，と思って作りはじめたのが WonX である．
しかし，やっているうちに，

	いつのまにか興味が逆転してしまった

で，WonX 作るのが目的になってしまった．

■■ N.A.D.A.R. 開発秘話

N.A.D.A.R. は，そもそもは中学生のときに，「TANK」という名前で作った，
２人対戦のゲームだった．もう10年以上前の話だ．

もともとぼくは戦車ゲームが好きなのだが，まわりにはあまり満足のいく
戦車ゲームが無かった．そこで昔のプログラマの鉄則，

	ほしければ作る

にしたがって，自宅の PC-9801VX で作ったのがはじまりだった．
このころ学校の理科室に PC-9801M2 があって，それでプレイしてたりしてた．
しかし当時の PC-9801M2 はすでにひと昔前の機種であり，8086 の 5MHz では
名機 PC-9801VX の 80286 8MHz にはかなうはずもなく，

	おそすぎてゲームにならん

とフトドキなことを考えていた．とくに接近戦になって，２人が同時に
砲弾とミサイルを撃つと，目に見えて速度が低下してしまう．しかしこれも，

	クライマックスでスローモーションになる，映画のワンシーンみたい

とあるていど納得していたわけであるから，

	遅延まで考慮に入れて逆に利用したゲーム

という，今思うとカッコイイ仕様ではあったと思う．(本当か!?)

TANK は一人プレイ用の TANK2，２人プレイ用になって，TANK3A，
改良を加えて，TANK3B, TANK3C, ... と製作していき，最終的には，
TANK3E まで製作した．
その後，兄の「戦車をもっと大きくしたほうがよい」という意見を採り入れて，
戦車を拡大した TANK3F，再びもとに戻した TANK3G というように，

	暇をみてはバージョンアップしていく

という，まさに趣味で作ってるプログラムであった．

大学３年生から４年生にかけて，

	マイコン BASIC MAGAZINE

によく投稿していて，一時期，常連になっていたのだが，
大学４年のときに，マイコン BASIC MAGAZINE の投稿用に，プログラムを
全体的に見直して，TANK3I を作った．が，これは，

	あえなくボツ

マイコン BASIC MAGAZINE の掲載基準は「アイディア重視」であって，
やはりこういうありがちなゲームは載りにくい．しかも２人でないと
プレイできないとなると，なおさら載りにくい．

ピーピング形式にして，TANK3J を作ったが，

	これもボツ

PC-9801 用の TANK は，ここまでである．

しかし，研究室に入って，X を使うようになってからは，いつか TANK を
X に移植したいと思っていた．そして，

	フリーソフトとして公開する

という，Tank 復活の方法を考えていた．

実際に Tank を書きはじめたのは，就職した1999年の4月からである．
4月に就職し，5月くらいから，Tank で使用するためのネットワーク通信用
ライブラリを書き出した．
このころ，ちょうど，

	オブジェクト指向

にはまってて，頭の中ではすっかりオブジェクト指向至上主義．

	オブジェクト指向で書いておけば，
	その向こうにはバラ色の世界が待っている

という考えだった．
しかし，通信には文字列処理がつきものなので，そのまえに文字列処理用の
String クラスを作ろう，と思った．
また，通信するには select() で調べることが必要になるから，select() 用の
クラスも欲しい．ソケットの接続までの部分は接続部分として，別クラスにしたい．
通信は文字列の通信を行う部分と，じっさいにデータ通信を行う部分は別クラスに
したい，などという感じで，オブジェクト指向をやりたてのときにありがちな，

	なんでもかんでもクラスにしよう

というようにはまってしまい，あげくのはてには，

	整数までも，Integer クラスで管理しそうな勢い

になって，収拾がつかなくなってしまう．
また，クライアントが複数になったときには，サーバ側では fork() して通信の
接続要求だけを処理するようなプロセスを作って，クライアントごとには
通信だけを処理するプロセスを作り，サーバプロセスとはパイプで通信する...
というような実装も見越した上で書きたい，などと，

	はてしない深みにはまっていってしまった

そのうち EyeClock-2.0 の開発を始めることになってしまい，こっちに
どっぷりつかってしまった．
1999年の８月から12月にかけては，EyeClock-2.0 にかかりっきりで，
Tank は先送り(ていうか，ほとんど忘れ去られた状態)になってしまった．

EyeClock-2.0 は1999年の年末ぎりぎり(クリスマスイブだった．
とくに意味はないのだが)に公開した．しかし今思えば，

	クリスマスイブに，世のため人のために

フリーソフトを公開しているなんて，

	聖人のような生活

だと思ってしまう．
しかし，ただの時計なので，

	たいして世のためになっていない

というのが悲しいところである．

EyeClock-2.0 がひと段落してからは，あそびで XKeyWrap とかを書いていたのだが，
2000年の１月中旬くらいにようやく Tank を書き出した．
以前の教訓があったので，今回はあまり細部にこだわらずに，

	とりあえず動くもんをつくって公開しちまえ

という方針で開発を進めた．
以前のネットワーク用ライブラリとか，EyeClock-2.0 での経験とかが
あったので，開発はトントン拍子に進んで，わずか１ヵ月足らずで
ふつうにプレイできるプロトタイプが仕上がった．

よく，「N.A.D.A.R.って，なんの略なの？」と聞かれる．
N.A.D.A.R. の命名には，ずいぶん悩んだ．ここで，命名の由来を書こう．

もともと橋本も僕も，

	グロブダー

というゲームが好きだった．ナムコのずいぶん古いアーケードゲームなのだが，
ちょっとでも気を抜いたら(ていうか，気を抜いていなくても)，あっと言うまに
やられてしまうという，スリルとスピード感のあるゲームだった．

やはりスリルと緊張感，一瞬の判断こそが

	アクションゲームの醍醐味

だとぼくは思っているので，そんなゲームを作りたいと常々思っていた．

N.A.D.A.R. のプロトタイプが完成して，そろそろ名前を決めてしまいたいと
いうとき，橋本と焼肉屋に行った．で，焼肉屋でいろいろ話したのだが，とりあえず，

	「TANK」はやめよう

ということになった．

戦車の重みを表現したいので，「グロブダー」のように，濁音のある名前にしたい．
そう考えると，「グロブダー」は，G,B,D と，濁音のある文字が３つも入っている．
そこで考えたのが，

	GNOMEDAR

でも，GNOME は直接的にとくに関係は無いのでこれは却下．
いっそのこと，日本的な名前はどうだろう？

	「風林火山」

なんて冗談半分でいろいろ考えていたのだが，そこでそのとき，

	「灘の生一本」

という日本酒のポスターが目に入った．

	「灘」ってのはどうだ？

このときは，あまり深く考えてなくって，けっきょくこの日には決まらなかった
のだが，このときにしっかり決めなかったのがよくなかった．
そのうち開発を進めるうちに，ファイル名とかも整理しだして，

	ほんとにもういいかげん名前を決めたい

と思い，けっきょく，「灘」にアクセントで r をつけて，「NADAR」にしてしまった．

というように，あまり意味なく決まってしまった「NADAR」なのだが，
作者としては，いちおう，

	アルファベットになにか意味を持たせたい

うーん，

	N.A.D.A.R. - Network Action ...

だめだ，Dのあたりでなんにもおもいつかん．

■■ EyeClock 開発秘話

そもそもなんで EyeClock を作り出したかってはなし．

大学の卒業研究のために研究室に配属されたのは，1996年の３月だった．
この研究室では数値計算を行うため，メインの OS として UNIX が使われていた
のだが，僕にとっては，これが，よかった．

研究室では主に FreeBSD を使って作業していたんだけれど，

	「好きな画像を時計にしたい!」

と，常々思っていた．
今思えば，よく探せばそういう時計アプリケーションもなにかしらあるんじゃ
ないかと思うんだけど，そのときはよく探しもせずに，man xclock をてきとーに
読んだくらいであきらめていた．
これが後々 EyeClock の開発につながったわけだ．

EyeClock の開発に着手したのは，たしか，1998 年の６月ごろだったと思う．

1998年の５月というと，自分は大学院の修士２年で，就職活動のあいまを
見つけては，本業の研究をそっちのけにして，

	XMangekyou

を書いていた．
なにせこのころは，毎日毎日，一日中 X のプログラミングをしてたのだ．
毎週火曜と水曜には研究室に泊まって，大学の近くの

	三河屋という酒屋(理科大の人はよく知っているハズだ)

に行って，ビールとワインを買って，夜になると，

	飲んで歌いながら

プログラミングをしていたもんだ．(今考えると，不気味だ)
研究室にはスパゲッティとミートソースの缶詰を買い置き(これも三河屋で買ったもの)
してあって，だいたい夜の12時を過ぎたころに，夜食を食べて，で，
明け方の4時頃までがんばって，眠くてどうしようもなくなったら，寝袋で寝る．
朝は10時頃に起きて，大学のトレーニングルームでシャワーを浴びて，
シャンプーして，ヒゲをそって，で，またプログラミングを始める，
といった生活だった．
このため，研究室には，

	着替えも常備してあった

このころまでは，だれも使っていなかった Sun SPARC Station 5 をよく
使っていたんだけれど，XMangekyou の動作を XFree86 上でテストする
必要性が出てきたので，これまたあまりだれも使っていなかった，ロースペックの
オーダーメイド AT 互換機(FreeBSD + XFree86) を使うようになった．
このロースペックマシンは，研究室に数少ない，

	音の出るマシン

のうちのひとつだったので，けっこうお気に入りだった．ロースペックなので，
だれも使わないし，計算を走らせたりもしないから，気軽に使えるということもあり，
けっきょく，卒業するまで，ずっとこのマシンを使っていた．
EyeClock や XStarRoll や修士論文は，すべてこのマシンを使って書いた．

５月の中旬に就職が決まって，そのあとには，たまに研究もしつつ，
でも本業はプログラミングというくらいのいきおいで，プログラミングをしていた．
当時の後輩曰く，

	「坂井さんはいっつも研究室にいるけど，
	  なにをやっているのかわからんです」

研究してるわけでもないし，遊んでいるようにも見えないし，ということだった
らしい．とはいっても，

	じつは遊んでいたんだけどね

５月の終り頃，XMangekyou をひととおり作り終えたあとは，いよいよ EyeClock の
開発にとりかかる．

まず，時計「MyClock」を作った．これは，時計とはいっても，

	白黒のビットマップを張りつけられるだけ

という，非常におそまつなものだった．当時はまだピックスマップファイルの
読み込みかたをしらなかったので，しかたなくビットマップで作ったのだ．

このあたりの作業の順番はじつはうろおぼえなので，たしかなことはよく
覚えていないのだが，次にやったのは，

	「ピックスマップファイルを読み込んで，カラーで表示したい!」

ということだったとおもう．
しかし，X の標準では，ピックスマップファイルを読み込んでピックスマップを
作成するような関数は，提供されていない．
X や Motif の書籍をいろいろ調べたのだが，ピックスマップファイルの
読み込みかたは，書いていなかった．そこで，かの有名な，

	EmiClock

のソースを参考にすることにした．
EmiClock のソースを読んで，はじめて Xpm ライブラリの存在を知り，
ピックスマップファイルを読み込むことができるようになった．
ちなみに EmiClock はすばらしく優れたプログラムで，ソースを見ると
わかるのだが，ほんとにいたれりつくせりで，

	X のプログラミングをしようとしてるひとは，ぜひ読んだほうがいい

という，おすすめの１本である．

これで MyClock は，カラーの画像が扱えるようになった．自分としては
それなりに満足して，タレントの画像を張り付けたりして使っていた．
そんなある日，忘れもしない，帰宅中の

	三田線水道橋〜白山

あたりで，ふと思った．

	「あれで目を動かしたら，面白いんじゃないか？」

ここから EyeClock の開発が始まったわけだ．

(次回作の OMAKE.jpn に続く)

■■ 趣味のプログラム

ぼくは子供のころから，なにかものを作ることが趣味だったんだけど，
ある日，ぼくの兄上(こいつもなにかものを作ることが趣味なのだが)と，
ぼくと，父親で，

	よくわからない展示会

のようなところに行った．(なんの展示会だったのか，会場はどこだったのかなどは，
まったく覚えていない)
この展示会場には，当時はやりだった LED のゲームとかがいろいろあったように
記憶しているのだが，この会場のある一角に，

	マイコン

が置いてあるコーナーがあった．(もともとは兄がそっちが目的だったらしいのだが)
このマイコンは，RETURN キーが緑色と赤色だったので，いま思えばおそらく，
東芝のパソピア７だったのだろうとおもう．
このマイコンでは，実際に BASIC のプログラムをいろいろいじる，というような
デモが行われていたらしく，

	BASIC のプログラムリストが画面上にダンプされていて，
	カーソルが左上で点滅しているだけ

だった．ちなみに，この「マイコン」を初めて見て，ぼくが最初に口にした言葉は，

	「ねえねえ，これってどんなゲームなの？」

だった．うーん，はずかしい．

しばらくして，近所のひとがパソコンを持っているというので，
兄といっしょに触らせてもらいに行くことになった．
このときあったのは，いま思えばたしか Sharp の MZ 系のマシンだったと思う．
当時はぼくはパソコンというものをまったく知らなかったので，ただ単に
兄についていって，兄がいじるのをとなりで見ていただけだったのだ．
兄がプログラムを打ち込み終って run すると，画面上に，

	2

とかの数字が出てきた．
もういちど run すると，今度は，

	6

とかの数字が出てきた．

	兄「これ，見てみ」
	僕「なに，これ？」

そう，このとき兄が書いていたプログラムは，忘れもしない，

	サイコロ

であったのである．
いま思えば，

	10 A=INT(RND(1)*6)+1
	20 PRINT A
	30 END

のようなプログラムを打ち込むのに，10数分かかっていたのだろう．

そんな兄の要望で，ついに我が家もパソコンを買うことになった．
当時兄は小学６年生で，毎週秋葉原に行っては抵抗やコンデンサを買いこんできて，
ラジオとかを作っていた(気違い小学生だ)のだが，そんなある日の日曜に，
父親，兄，僕で，いよいよ秋葉原に買いに行った．

秋葉原駅前のサトームセン(エスカレーターから外が見える建物)で選んだ
パソコンは，忘れもしない，

	PC-8001mkII

であった．たしか当時で本体価格が127,000円(だと思った)で，さらに当時はまだ
高価だったカラーディスプレイ(当時はまだ，グリーンディスプレイが主流だった)
とデータレコーダーも買ったわけだから，当時の小学生にしては，
けっこう高い買物だったとおもう．
これのおかげで今があるわけだから，親には感謝感謝である．

このときついでに，

	2001年宇宙の旅

というゲームと，あと，

	ファイヤーレスキュー

というゲームも買った．このファイヤーレスキューというのは，当時，
マイコンショップの店頭で，デモなどによく使われていた記憶があるのだが，
内容はというと，

	消防車を左右に操作して，スペースを押すとハシゴが伸びて，
	ビルの火事から人を救助する

という，非常に単純なゲームだった．しかも，画面構成は，

	キャラクタベース

だったのである．

	        ____
	       |    |
	       /\__/
	      /\/
	     /\/
	    /\/
	   /\/
	 _/\/__________
	|   |      | | \
	|   |      | |__\
	|   |      |    |
	|__/ \____/ \___|
	   \_/    \_/

というような消防車を動かすわけである．
どちらも BASIC で書いてあって，ゲーム中に Stop を押すと，

	^C
	Break in 1130

とかいって止まってしまって，なんと，

	プログラムリストを見ることができる

という，いまから考えると信じられないようなものだった．

ぼくが小４の６月に，ついに我が家にもパソコンが来た．このころは，

	パソコンが使える ＝ BASIC でプログラムが書ける

という時代だったので，ぼくもプログラムを書きはじめることになるのだが，
はじめて買ったパソコンの本は，

	BASICプログラミング

という本だった．(漫画である)
どういう内容の本かというと，

	ロムさんとラムさん

という兄弟が，

	マイコさんやアイコさん

のために，家計簿だとか，社員の定期券の期限の計算用プログラムとかの
プログラミングをしていく，という内容だった．
ちなみにアイコさんはマイコさんの妹で，アイコさんはショートカットの OL で，
ロムさんはマイコさんが好きで，ラムさんはアイコさんが好き，という設定だった．
しかし，

	今思うと，すごい名前だ

ちなみにぼくは，長女系のマイコさんより，次女系のアイコさんのほうが好きだった．

この本は BASIC をあるていど知っていることを前提にしていて，
実際にプログラムを書いていく，という内容だったので，まったくの初心者の
ぼくには，よくわからなかった．
そこで次に買った本が，

	まんがパソコンゼミナール(きぎようへい・さとう光)

この本は，なんと，いまだに自宅に保存してある．
どういう本かというと，

	マイちゃんとコンちゃん

が，名機 PC-8001 を使って，「先生」と「ネコちゃん」といっしょに，
コンピュータの仕組みや，プログラムの書き方を勉強していく，という内容だった．
この本はとてもわかりやすくて，

	データバスやアドレスバスやコントロールバスや ROM や RAM や
	モニタプログラムや BASIC インタプリタや入力装置や出力装置や
	入出力装置や機械語

といった，ハードのこともちゃんと解説されていて，とってもためになった．
この本は，ボロボロになるまで，100回以上繰り返し読んでいると思う．

この本の最後を飾っていたプログラムは，「センスイカンノエ」というものである．
どういうものかというと，たしか，

10 REM センスイカンノエ
20 PRINT CHR$(12)
30 LOCATE 20,10
40 PRINT "センスイカンノエ"
50 FOR I=0 TO 1000
60 NEXT
70 PRINT CHR$(12)
80 LOCATE 0,10
90 PRINT "      ■      "
100 PRINT "/~~~~~~~~~~~~\"
110 PRINT "\____________/"
120 END

というようなものだったと思う．

	FOR I=0 TO 1000
	NEXT

で，十分なウエイトになってしまうあたりが，すごいとこだ．

そーいえば，このころってまだ，

	マイコン

って言葉が使われていた時代だったなあ．

ぼくがプログラミングをはじめたころは，BASIC が全盛の時期だった．
当時は BASIC のプログラムが載っている本が多くあって，
なにをかくそうぼく自身，本に載っているプログラムを

	ゲームやりたさで

ひたすら打ち込んで，プログラムをおぼえた，というクチである．
プログラムを打ち込み終って，どきどきしながら run させると，
必ずといっていいほど，

	Syntax Error in 30 (いきなり３行目だったりする)

などと言われてしまって，それから本とディスプレイを照らしあわせるという
あまりやりたくない作業になるわけである．
Syntax Error なら，まだいい．たいていはそこの行にミスがあるからである．
やっかいなのは，

	Illegal function call (関数やステートメントに渡す値がおかしい)

とかである．これだと，たいていは，その行ではなく，別の行に間違いがある．
いちばんイヤだったのは，

	Subscript out of range (配列の範囲をこえたアクセス)

だ．これだと，まず間違いなく，別の行にミスがあって，変数の値が
おかしくなっているのである．
しかしそれも，

	(タダで)ゲームがやりたくてたまらない小学生

にとっては，それほど苦ではなかったようである．
この苦労(?)のおかげで，いま思えば，フリーソフトウエアプログラマにとって
もっとも重要な力である，

	どんなエラーが出ても，自力でなんとかする気力

が身についたと思う．

どんな本を参考にしていたかというと，一番さいしょに読んで打ち込みはじめたのは，
いまでも覚えている，知る人ぞ知る，ナツメ社の，

	はるみのゲームライブラリII

という本だった．この本は残念ながら，どこかへいってしまった．
うーん，もう一度，読んでみたいものである．
「あるけあるけゲーム」(tron のようなゲーム)とか，
「スクロールジャンプ」とか，
「ビルディングクラッシュ」とか，
「地底探検ゲーム」とか，
ペンゴもどきとか，
月面着陸とかを打ち込んでは遊んでた．
この本は当時はやりの，

	１画面プログラム

を集めた本(しかも，40x25)で，わりと手軽に打ち込めるプログラムが
多かったのだが，それでもパソコンを覚えたての小学生ではキーを探すのも
ままならず，１本を入力するのに２時間とか３時間とかかかっていた．
しかしそれでも，

	(タダで)ゲームをやりたいという熱意

は強く，学校が終ったら急いで帰って，きのうの続きを打ち込みはじめる，
という日も多かったように思う．
当然，学校でもゲームのことばかり考えているわけであるから，困ったものだ．

	はるみのゲームライブラリ

という本のプログラムも，よく打ち込んだ．
そのうち打ち込んだゲームを適当に改良したりするようになる．

やがて，自分でもゲームを作り出すようになる．
はじめて作ったゲームは，いまでも覚えているが，

	「レーザーパックマン」

というタイトルだった．
どういうゲームかというと，

・まず，敵がいる．(ランダムで動いている)
・自分がいる．(テンキーの '1', '2', '3', '5' で移動できる)
・自分と敵の X 座標が一致すると，「ピッ」と音がして，レーザーが発射される．
  (IF X=EX THEN LINE(X,Y)-(EX,EY),"■",2 のようなことをやっているわけである)
・自分と敵の Y 座標が一致したときも，おんなじ．
・レーザーを撃つと，スコアが増える．

パッと見てまず思うだろう．そう，このゲームには，

	ゲームオーバーがない

のである．
いま思えば，こんなしょーもないゲームでよく遊んでいたものだと思う．
今，思いだせる限りで，レーザーパックマンを再現してみよう．

10 X=20:Y=12:TX=10:TY=10:S=0
20 LOCATE X,Y:PRINT " "
30 LOCATE TX,TY:PRINT " "
40 I$=INKEY$
50 IF I$="1" AND X>0 THEN X=X-1
60 IF I$="3" AND X<39 THEN X=X+1
70 IF I$="5" AND Y>0 THEN Y=Y-1
80 IF I$="2" AND Y<23 THEN Y=Y+1
90 IF INT(RND(1)*2)+1=1 THEN TX=TX-1:GOTO 130
100 IF INT(RND(1)*2)+1=1 THEN TY=TY-1:GOTO 130
110 IF INT(RND(1)*2)+1=1 THEN TX=TX+1:GOTO 130
120 TY=TY+1
130 LOCATE X,Y:PRINT "○"
140 LOCATE TX,TY:PRINT "●"
150 IF X=TX AND Y=TY THEN LINE(X,Y)-(TX,TY),"■",2:S=S+100:BEEP1:BEEP0:GOTO 170
160 IF X=TX OR Y=TY THEN LINE(X,Y)-(TX,TY),"■",2:S=S+10:BEEP1:BEEP0
170 LOCATE 10,0:PRINT S
180 GOTO 20

たしか，こんなんだったとおもう．(なにしろ，はじめて書いたプログラムですから)
確率的に，敵が左上のほうに行きやすくなってしまったというのをおぼえている．

	こんなんおもしろいのか？

とも思ってしまうが，自分で作ったゲームというのは，
それなりにおもしろいものである．(本当かなあ...)

ほかにも，インベーダーゲームを作ったことがある．
これは，大量のインベーダーをひとつひとつ処理することに無理があったので，

	GET(X,Y)-(X+9,Y+4),G% してから, PUT(X+VX,Y+VY)-(X+VX+9,Y+VY+4),G%

で，インベーダーをまとめて動かしていた．

このころの雑誌で忘れられないのが，

	マイコン BASIC マガジン

である．

(次回作の OMAKE.jpn に続く)

■■ 参考文献

ぼくは，本が好きだ．

本棚の専門書を分類したり，整頓したりするのが，とても好きである．

というわけで，参考文献紹介も兼ねて，ちょっと書評(ていうか，個人的な思い出話)
でも書こうかと思う．

■ C言語関係

「はじめての C 改訂第３版 [ANSI C 対応]」

ぼくが大学３年のとき，この本で C 言語に入門したので，
けっこう思い入れがある本である．
あとで知ったのだが，入門書としては，わりと名著で有名らしい．
これを参考にして，大学の授業で，

	円周率を(double 型の範囲で)計算するプログラムを作る

という課題があったときに，調子にのって，

	円周率を10万桁まで計算するプログラム

を作った記憶がある．しかも，

	計算の途中経過をセーブすることができる

という，なかなか気のきいたプログラムだった．

「C プログラミング診断室」

衝動買いした本．いちおうひととおり読んだ...と思う．
たしか大学４年のとき，池袋のビックカメラにまだパソコン館が無いころ，
ビックカメラの１階の書籍コーナーで買った．
内容はちょっと古めなので，オブジェクト指向が流行りの今としては，ちょっと
古いかもしれない，と思う．

「C プログラミング専門課程」

研究室に入ってから UNIX 上で C 言語でプログラミングをするようになって，
「C 言語をもっと勉強したい!」と思って買った本．
これはためになった．この本のおかげで，コンパイラの動作とか，メモリとかが
わかってきた．

こんな疑問を持ったことを覚えている．
「char * s = "ABC"; などの文字列リテラルは，メモリ上に静的に確保される．
  ということは，
    while (1) {
      printf("ABC\n");
    }
  を実行すると，printf(); が実行されるたびに "ABC" がメモリ上に
  配置されるわけだから，そのうちメモリがなくなってしまうのではないだろうか？
」

しかも，これに対する自分の解答が，
「
    char * a = "ABC";
    char * b = "ABC";
  のように，文字列がダブっている場合には，コンパイラが判断して，
  同じ領域に割り付けたりするらしい．
  たぶん，while () で printf() を繰り返したときにも，
  これと同様に，printf() の実行時には，文字列は同じ領域に
  割り付けられるのだろう．
」

うーん，すばらしくとんちんかんというか，さすが BASIC 出身者，というか，
こうして書くこともはずかしいような疑問である．
(インタプリタとコンパイラの動作を誤解しているわけだ)

「プログラミング言語 C」(いわゆる "K&R" である)

有名な本なので，研究室に入ってからとりあえず買ってみた．ざっと読んだだけ．
「fgetc() の戻り値が，なぜ int 型なのか?」という疑問を持ったときに，
この本に解説してあったので，

	「なんていい本なんだ!」

と思って買ったんだけど，あんまりちゃんと読んでない．

「C プログラミング FAQ」

これは，いい．最高にためになる．
とりあえず１度通して読んだが，またそのうちもう一度通して読みたいと思っている．
中級者くらいになって，たいてい疑問に思うようなことは，必ず書いてあるのが
すごい．
この本に書いてあることが全般的に理解できてれば，C 言語はほぼ完璧なのでは，
と思う．

■ X 関係

「X-Window Ver.11 プログラミング[第２版]」

X のプログラムをはじめたころに，これの第１版が研究室にあったので，
よく参考にしてた．
そのうち，家で使う分と学校で使う分の２冊が欲しくなってきて，けっきょく，
第２版を自分で買った．
X のプログラミングをする人って，この本を参考にしている人がけっこう多い
みたいだね．フリーソフトのドキュメントを読んでると，参考文献とかで
よく見かけたりする．

「X-Window OSF/Motif プログラミング」

X のプログラムをはじめたころに，これを参考にしてプログラミングしてた．
はじめのうちは，Motif (正確には，Lesstif) を使っていたのだが，
やはり Motif は商品である，というのと，

	「BSD を 256 倍使うための本」(いわゆる，「黒いニゴロの本」である)

の，EmiClock 開発秘話で，

	X のプログラミングは，X ツールキットを使うのがオシャレ

というふうに書いてあった，というのがあって，だんだん Motif は使わなくなった．
でも X ツールキット専門の本ってなぜかすっごく少なくて，たいていは
X ツールキットのプログラミングをするときでも，Motif の本を参考にしたりしてる．

ちなみに，EyeClock は，

	「BSD を 256 倍使うための本」

に，すっごく影響を受けている．

■ そのほか

「スーパーユーザの日々」
「UNIX ネットワークの日々」
「Mail & News の日々」

研究室のシステム管理者をやるようになって，この本でいろいろ勉強した．
帰宅中の有楽町線のなかでよく読んだ．

内容はちょっと古めだが，基礎的なことがしっかりと書かれているので，
基礎勉強にとてもいい本だと思う．書いてある内容も，とてもしっかりしている．
「UNIX のシステムの勉強がしたいんだけど，なにかいい本はないか？」
「ネットワークの勉強がしたいんだけど，なにかいい本はないか？」
とか聞かれたときには，この本を推薦するようにしている．

「UNIX ネットワークの日々」「Mail & News の日々」は，研究室内の
システム管理者育成の勉強会で教材にしていた．この勉強会では，毎回，

	「K君」や「中村さん」の役を決めて，読む

しかも当然，

	セリフ付

ということをしていて，朝，研究室に入ってくる卒研生とかが，

	スーパーユーザーが，学芸会のセリフの練習でもしているかのような姿

をまのあたりにして，ギョッとしていた．

「セキュリティの日々」とかも，出してほしいもんだ．

「GNU ソフトウエアプログラミング」

プログラミングに emacs, gcc, make, gdb を使うときの一連の流れが
わかるので，とってもいい本だと思う．
個々のアプリケーションをひとつひとつ詳しく解説してある本はたくさん
あるのだが，開発の一連の流れとして解説してある本は，なかなか少ない．

「よしだともこのルート訪問記」

最近買ったのだが，なんていうか，ここまで，

	システム管理者の実際

が書かれているという本は，他にないのでは？ とおもう．
(そりゃそうだ，現役の管理者へのインタビューなのだから)
ほかの大学や研究室とかではどういうふうに管理されているか，というのが，
非常に幅広く紹介されていて，とてもためになる．
というのは，コンピュータやネットワークのシステムの構成など
(こういったことも非常にためになるが)が書いてあるだけでなく，
「管理者の人材確保」や「管理者の育成・教育態勢」がどのようになって
いるかなどが書かれているからだ．
やはり，「人材の確保」と「教育」がいちばん大変で重要なことであって，
こういったことが，システム管理の実態だと思う．

しかし，読んでいると，他の大学や研究室などの管理態勢や教育態勢が，

	うらやましくなってしまう

ということもある．

(次回作の OMAKE.jpn に続く)

■■ うまいもの

寿司がすきである．

おごってもらうとしたら，

1.寿司
2.焼肉
3.なんかめずらしいたべもの

の順に嬉しい．なにしろ小学生のころは，

	寿司屋になりたかった

というくらいである．
とはいっても，寿司などそうそういっつも食べにいけるものではないから，
ふだんは回転寿司にいったり，たまに寿司屋で食べるくらいである．

とはいっても，魚の名前をよく知らない．寿司屋でネタを見ても，
なんの魚だかわからなかったりする．
そのうち，ちゃんとネタの名前をおぼえて，

	「なんにいたしますか？」
	「そうだなあ．白身のいいとこを握ってくれ」
	「へい，おまち」
	「お，これはヒラメだね」

なーんて言ってみたいのだが．

ちなみに，好きなネタベスト10は，

1. 中トロ
2. ビントロ
3. サーモン，ハマチ，マグロ赤身
6. 鯛，メカジキ，サンマ
9. カニ味噌，ウニ

てなかんじだろうか．適当に考えただけなのだが．
うーん，こうしてみると，まだまだ子供の味覚である．

池袋は，やたらと回転寿司が多いので，嬉しい．

(次回作の OMAKE.jpn に続く)

■■ 携帯端末

わずか 800g 程度の Libretto SS1000 に FreeBSD と X を入れて，
電車の中だろうが，待ち合わせの「いけふくろう」の前だろうが，
ところかまわずプログラミングをしている．

・携帯端末(いわゆる，WindowsCEマシン)
・携帯Java端末
・携帯電話

ちょっと前までは，携帯端末が今後の主流になると思っていた．
しかし今では，これからは，携帯端末でなく，携帯電話が主流になって，
携帯電話でなんでもできる，というような方向に進んで行くのだろうとおもう．
というのは，携帯電話はやはり「電話」という，実用的で馴染みやすい機能が
メインであるからだ．
「GPS標準搭載の携帯端末」があったとしても，GPSをやるためにわざわざ
携帯端末を買って，操作をおぼえようとする人は少ないだろう．
しかし，「GPSつき携帯電話」ならば，携帯電話が欲しい人で，物珍しさで
買ってしまいそうな人が出てくるような気はする．

きっとそのうち，携帯電話に Java や Linux が搭載され，美術館に行ったら
自分の携帯電話に案内が自動的にインストールされて，自分の携帯電話が
案内してくれる，というようになるのだろう．

携帯電話のメモリサイズや処理能力はどんどん進化しているから，いまパソコンで
できるようなことは，ぜんぶ携帯電話でできるようになってしまう．
そのうち映画とかも見れるようになって，電車の中の10分くらいの中途半端な
自由時間に，ちょっと映画をみたり，ロールプレイングゲームの続きをしたり，
電子ペットにえさをあげたりするようになるのだろう．

携帯電話のいいところは，小さくて電車の中とかでいじっていても違和感は無いが，
多彩の機能を盛り込める程度には大きい，というところだ．
たとえば，GPSつきのごつくてでかい腕時計が出ても，それをいつもつけようとする
人はいないだろう．
また，「違和感が無い」というのはとても重要だ．
ぼくのようにところかまわず人目も気にせず，いつどんなところでもプログラムを
書き出してしまうような人間はともかく，普通の人は，やはり人目は気になる
(のだと思う)からだ．

このファイルはここまで．
